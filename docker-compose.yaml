version: '3'
services:
  base:
    build: 
      context: .
      dockerfile: Dockerfile
    image: base-image
  mysql:
    image: mysql
    hostname: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: abc123456
      MYSQL_DATABASE: douyin
    restart: always



  mongodb:
    container_name: mongodb
    image: mongo:5.0.10-focal
    ports:
      - "27017:27017"
    restart: always
    command:
      - "--auth"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: abc123456
      wiredTigerCacheSizeGB: 2
      
  gorse:
    image: zhenghaoz/gorse-in-one
    hostname: gorse
    depends_on:
      - mysql
      - redis
    volumes:
      - ./common/conf/gorse.toml:/etc/gorse/config.toml
    ports:
      - "8088:8088"
    command: 
      -c /etc/gorse/config.toml

  etcd:
    hostname: etcd
    image: bitnami/etcd
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    privileged: true
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      - "ALLOW_NONE_AUTHENTICATION=yes"
      
  redis:
    image: redis
    hostname: redis
    ports:
      - "6379:6379"
    restart: always

  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_COMPRESSION_CODEC: snappy
      KAFKA_MESSAGE_MAX_BYTES: 52428800
      KAFKA_MAX_REQUEST_SIZE: 52428800
  
  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      TZ: Asia/Shanghai
  
  bloom:
    image: redislabs/rebloom
    hostname: bloom
    ports:
      - "6380:6379"
    restart: always

  video:
    depends_on:
      - mysql
      - etcd
      - redis
    image: base-image
    ports:
      - "8084:8084"
    command: sh -c "cd /app/rpcServer/video && sleep 10 && ./main"
    restart: always
    
  relation:
    depends_on:
      - mysql
      - etcd
      - redis
    image: base-image
    ports:
      - "8082:8082"
    command: sh -c "cd /app/rpcServer/relation && sleep 10 && ./main"
    restart: always

  message:
    depends_on:
      - mysql
      - etcd
      - redis
    image: base-image
    ports:
      - "8083:8083"
    command: sh -c "cd /app/rpcServer/message && sleep 10 && ./main"
    restart: always

  user:
    depends_on:
      - mysql
      - etcd
      - redis
    image: base-image
    ports:
      - "8081:8081"
    command: sh -c "cd /app/rpcServer/user && sleep 10 && ./main"
    restart: always
  
  interaction:
    depends_on:
      - mysql
      - etcd
    image: base-image
    ports:
      - "8085:8085"
    command: sh -c "cd /app/rpcServer/interaction && sleep 10 && ./main"
    restart: always

  publisher:
    depends_on:
      - mysql
      - etcd
      - redis
    image: base-image
    command: sh -c "cd /app/rpcServer/publisher && sleep 10 && ./main"
    restart: always

  logger:
    depends_on:
      - mysql
      - etcd
    image: base-image
    command: sh -c "cd /app/rpcServer/logger && sleep 10 && ./main"
    restart: always

  http_server:
    depends_on:
      - message
      - interaction
      - user
      - relation
      - video
    image: base-image
    ports:
      - "8080:8080"
    command: sh -c "cd /app && sleep 10 && ./main"
    restart: always


  # Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib-dev:latest
    hostname: otel
    command: [ "--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}" ]
    volumes:
      - ./common/conf/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679" # zpages extension
    depends_on:
      - jaeger-all-in-one

  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268"
      - "14250:14250"
      - "6831:6831"

  # Victoriametrics
  victoriametrics:
    container_name: victoriametrics
    image: victoriametrics/victoria-metrics
    ports:
      - "8428:8428"
      - "8089:8089"
      - "8089:8089/udp"
      - "2003:2003"
      - "2003:2003/udp"
      - "4242:4242"
    command:
      - '--storageDataPath=/storage'
      - '--graphiteListenAddr=:2003'
      - '--opentsdbListenAddr=:4242'
      - '--httpListenAddr=:8428'
      - '--influxListenAddr=:8089'
    restart: always

  # Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
